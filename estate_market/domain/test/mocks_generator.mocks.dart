// Mocks generated by Mockito 5.4.4 from annotations
// in domain/test/mocks_generator.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;

import 'package:dartz/dartz.dart' as _i3;
import 'package:domain/entities/account_entity.dart' as _i7;
import 'package:domain/entities/ad_entity.dart' as _i8;
import 'package:domain/entities/apartment_entity.dart' as _i14;
import 'package:domain/entities/deposit_entity.dart' as _i17;
import 'package:domain/entities/garage_entity.dart' as _i13;
import 'package:domain/entities/message_entity.dart' as _i11;
import 'package:domain/entities/property_entity.dart' as _i28;
import 'package:domain/entities/residence_entity.dart' as _i15;
import 'package:domain/entities/terrain_entity.dart' as _i16;
import 'package:domain/entities/wrappers/address_entity.dart' as _i29;
import 'package:domain/entities/wrappers/collection_reference_entity.dart'
    as _i4;
import 'package:domain/entities/wrappers/coordinates_entity.dart' as _i5;
import 'package:domain/entities/wrappers/document_reference_entity.dart' as _i2;
import 'package:domain/entities/wrappers/landmark_entity.dart' as _i18;
import 'package:domain/entities/wrappers/position_entity.dart' as _i25;
import 'package:domain/errors/failure.dart' as _i21;
import 'package:domain/repositories/account_repository.dart' as _i6;
import 'package:domain/repositories/chat_repository.dart' as _i10;
import 'package:domain/repositories/database_repository.dart' as _i12;
import 'package:domain/repositories/filter_repository.dart' as _i19;
import 'package:domain/repositories/image_upload_repository.dart' as _i20;
import 'package:domain/repositories/login_repository.dart' as _i22;
import 'package:domain/repositories/permission_repository.dart' as _i23;
import 'package:domain/repositories/position_repository.dart' as _i24;
import 'package:domain/services/register_service.dart' as _i26;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i27;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDocumentReferenceEntity_0 extends _i1.SmartFake
    implements _i2.DocumentReferenceEntity {
  _FakeDocumentReferenceEntity_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDateTime_2 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCollectionReferenceEntity_3 extends _i1.SmartFake
    implements _i4.CollectionReferenceEntity {
  _FakeCollectionReferenceEntity_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCoordinatesEntity_4 extends _i1.SmartFake
    implements _i5.CoordinatesEntity {
  _FakeCoordinatesEntity_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AccountRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAccountRepository extends _i1.Mock implements _i6.AccountRepository {
  MockAccountRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set currentAccount(_i7.AccountEntity? _currentAccount) => super.noSuchMethod(
        Invocation.setter(
          #currentAccount,
          _currentAccount,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set currentAccountDocument(
          _i2.DocumentReferenceEntity? _currentAccountDocument) =>
      super.noSuchMethod(
        Invocation.setter(
          #currentAccountDocument,
          _currentAccountDocument,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set favoriteAds(List<_i8.AdEntity>? _favoriteAds) => super.noSuchMethod(
        Invocation.setter(
          #favoriteAds,
          _favoriteAds,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Stream<_i7.AccountEntity?> get accountStream => (super.noSuchMethod(
        Invocation.getter(#accountStream),
        returnValue: _i9.Stream<_i7.AccountEntity?>.empty(),
      ) as _i9.Stream<_i7.AccountEntity?>);

  @override
  _i9.Stream<List<_i8.AdEntity>?> get favoriteAdsStream => (super.noSuchMethod(
        Invocation.getter(#favoriteAdsStream),
        returnValue: _i9.Stream<List<_i8.AdEntity>?>.empty(),
      ) as _i9.Stream<List<_i8.AdEntity>?>);

  @override
  _i9.Stream<List<_i8.AdEntity?>> get myAdsStream => (super.noSuchMethod(
        Invocation.getter(#myAdsStream),
        returnValue: _i9.Stream<List<_i8.AdEntity?>>.empty(),
      ) as _i9.Stream<List<_i8.AdEntity?>>);

  @override
  void removeCurrentAccount() => super.noSuchMethod(
        Invocation.method(
          #removeCurrentAccount,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<void> setCurrentAccountByEmail(String? email) =>
      (super.noSuchMethod(
        Invocation.method(
          #setCurrentAccountByEmail,
          [email],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> updateAccount(
    String? phoneNumber,
    _i7.SellerType? sellerType,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateAccount,
          [
            phoneNumber,
            sellerType,
          ],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  void addFavoriteAd(_i8.AdEntity? ad) => super.noSuchMethod(
        Invocation.method(
          #addFavoriteAd,
          [ad],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeFavoriteAd(_i8.AdEntity? ad) => super.noSuchMethod(
        Invocation.method(
          #removeFavoriteAd,
          [ad],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ChatRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockChatRepository extends _i1.Mock implements _i10.ChatRepository {
  MockChatRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Stream<List<_i11.MessageEntity>> getMessages() => (super.noSuchMethod(
        Invocation.method(
          #getMessages,
          [],
        ),
        returnValue: _i9.Stream<List<_i11.MessageEntity>>.empty(),
      ) as _i9.Stream<List<_i11.MessageEntity>>);

  @override
  _i9.Stream<List<_i7.AccountEntity>> getChatUsers() => (super.noSuchMethod(
        Invocation.method(
          #getChatUsers,
          [],
        ),
        returnValue: _i9.Stream<List<_i7.AccountEntity>>.empty(),
      ) as _i9.Stream<List<_i7.AccountEntity>>);

  @override
  void setCurrentUser(_i7.AccountEntity? user) => super.noSuchMethod(
        Invocation.method(
          #setCurrentUser,
          [user],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setOtherUser(_i7.AccountEntity? user) => super.noSuchMethod(
        Invocation.method(
          #setOtherUser,
          [user],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DatabaseRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseRepository extends _i1.Mock
    implements _i12.DatabaseRepository {
  MockDatabaseRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i2.DocumentReferenceEntity> insertGarageEntity({
    required double? surface,
    required double? price,
    required bool? isNegotiable,
    required int? constructionYear,
    required _i13.ParkingType? parkingType,
    required int? capacity,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertGarageEntity,
          [],
          {
            #surface: surface,
            #price: price,
            #isNegotiable: isNegotiable,
            #constructionYear: constructionYear,
            #parkingType: parkingType,
            #capacity: capacity,
          },
        ),
        returnValue: _i9.Future<_i2.DocumentReferenceEntity>.value(
            _FakeDocumentReferenceEntity_0(
          this,
          Invocation.method(
            #insertGarageEntity,
            [],
            {
              #surface: surface,
              #price: price,
              #isNegotiable: isNegotiable,
              #constructionYear: constructionYear,
              #parkingType: parkingType,
              #capacity: capacity,
            },
          ),
        )),
      ) as _i9.Future<_i2.DocumentReferenceEntity>);

  @override
  _i9.Future<void> updateGarageEntity({
    required _i2.DocumentReferenceEntity? previousProperty,
    required double? surface,
    required double? price,
    required bool? isNegotiable,
    required int? constructionYear,
    required _i13.ParkingType? parkingType,
    required int? capacity,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateGarageEntity,
          [],
          {
            #previousProperty: previousProperty,
            #surface: surface,
            #price: price,
            #isNegotiable: isNegotiable,
            #constructionYear: constructionYear,
            #parkingType: parkingType,
            #capacity: capacity,
          },
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<_i2.DocumentReferenceEntity> insertApartmentEntity({
    required double? surface,
    required double? price,
    required bool? isNegotiable,
    required int? constructionYear,
    required _i14.Partitioning? partitioning,
    required int? floor,
    required int? numberOfRooms,
    required int? numberOfBathrooms,
    required _i15.FurnishingLevel? furnishingLevel,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertApartmentEntity,
          [],
          {
            #surface: surface,
            #price: price,
            #isNegotiable: isNegotiable,
            #constructionYear: constructionYear,
            #partitioning: partitioning,
            #floor: floor,
            #numberOfRooms: numberOfRooms,
            #numberOfBathrooms: numberOfBathrooms,
            #furnishingLevel: furnishingLevel,
          },
        ),
        returnValue: _i9.Future<_i2.DocumentReferenceEntity>.value(
            _FakeDocumentReferenceEntity_0(
          this,
          Invocation.method(
            #insertApartmentEntity,
            [],
            {
              #surface: surface,
              #price: price,
              #isNegotiable: isNegotiable,
              #constructionYear: constructionYear,
              #partitioning: partitioning,
              #floor: floor,
              #numberOfRooms: numberOfRooms,
              #numberOfBathrooms: numberOfBathrooms,
              #furnishingLevel: furnishingLevel,
            },
          ),
        )),
      ) as _i9.Future<_i2.DocumentReferenceEntity>);

  @override
  _i9.Future<void> updateApartmentEntity({
    required _i2.DocumentReferenceEntity? previousProperty,
    required double? surface,
    required double? price,
    required bool? isNegotiable,
    required int? constructionYear,
    required _i14.Partitioning? partitioning,
    required int? floor,
    required int? numberOfRooms,
    required int? numberOfBathrooms,
    required _i15.FurnishingLevel? furnishingLevel,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateApartmentEntity,
          [],
          {
            #previousProperty: previousProperty,
            #surface: surface,
            #price: price,
            #isNegotiable: isNegotiable,
            #constructionYear: constructionYear,
            #partitioning: partitioning,
            #floor: floor,
            #numberOfRooms: numberOfRooms,
            #numberOfBathrooms: numberOfBathrooms,
            #furnishingLevel: furnishingLevel,
          },
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<_i2.DocumentReferenceEntity> insertHouseEntity({
    required double? price,
    required bool? isNegotiable,
    required int? constructionYear,
    required double? insideSurface,
    required double? outsideSurface,
    required int? numberOfFloors,
    required int? numberOfRooms,
    required int? numberOfBathrooms,
    required _i15.FurnishingLevel? furnishingLevel,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertHouseEntity,
          [],
          {
            #price: price,
            #isNegotiable: isNegotiable,
            #constructionYear: constructionYear,
            #insideSurface: insideSurface,
            #outsideSurface: outsideSurface,
            #numberOfFloors: numberOfFloors,
            #numberOfRooms: numberOfRooms,
            #numberOfBathrooms: numberOfBathrooms,
            #furnishingLevel: furnishingLevel,
          },
        ),
        returnValue: _i9.Future<_i2.DocumentReferenceEntity>.value(
            _FakeDocumentReferenceEntity_0(
          this,
          Invocation.method(
            #insertHouseEntity,
            [],
            {
              #price: price,
              #isNegotiable: isNegotiable,
              #constructionYear: constructionYear,
              #insideSurface: insideSurface,
              #outsideSurface: outsideSurface,
              #numberOfFloors: numberOfFloors,
              #numberOfRooms: numberOfRooms,
              #numberOfBathrooms: numberOfBathrooms,
              #furnishingLevel: furnishingLevel,
            },
          ),
        )),
      ) as _i9.Future<_i2.DocumentReferenceEntity>);

  @override
  _i9.Future<void> updateHouseEntity({
    required _i2.DocumentReferenceEntity? previousProperty,
    required double? price,
    required bool? isNegotiable,
    required int? constructionYear,
    required double? insideSurface,
    required double? outsideSurface,
    required int? numberOfFloors,
    required int? numberOfRooms,
    required int? numberOfBathrooms,
    required _i15.FurnishingLevel? furnishingLevel,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateHouseEntity,
          [],
          {
            #previousProperty: previousProperty,
            #price: price,
            #isNegotiable: isNegotiable,
            #constructionYear: constructionYear,
            #insideSurface: insideSurface,
            #outsideSurface: outsideSurface,
            #numberOfFloors: numberOfFloors,
            #numberOfRooms: numberOfRooms,
            #numberOfBathrooms: numberOfBathrooms,
            #furnishingLevel: furnishingLevel,
          },
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<_i2.DocumentReferenceEntity> insertTerrainEntity({
    required double? surface,
    required double? price,
    required bool? isNegotiable,
    required int? constructionYear,
    required bool? isInBuildUpArea,
    required _i16.LandUseCategories? landUseCategory,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertTerrainEntity,
          [],
          {
            #surface: surface,
            #price: price,
            #isNegotiable: isNegotiable,
            #constructionYear: constructionYear,
            #isInBuildUpArea: isInBuildUpArea,
            #landUseCategory: landUseCategory,
          },
        ),
        returnValue: _i9.Future<_i2.DocumentReferenceEntity>.value(
            _FakeDocumentReferenceEntity_0(
          this,
          Invocation.method(
            #insertTerrainEntity,
            [],
            {
              #surface: surface,
              #price: price,
              #isNegotiable: isNegotiable,
              #constructionYear: constructionYear,
              #isInBuildUpArea: isInBuildUpArea,
              #landUseCategory: landUseCategory,
            },
          ),
        )),
      ) as _i9.Future<_i2.DocumentReferenceEntity>);

  @override
  _i9.Future<void> updateTerrainEntity({
    required _i2.DocumentReferenceEntity? previousProperty,
    required double? surface,
    required double? price,
    required bool? isNegotiable,
    required int? constructionYear,
    required bool? isInBuildUpArea,
    required _i16.LandUseCategories? landUseCategory,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTerrainEntity,
          [],
          {
            #previousProperty: previousProperty,
            #surface: surface,
            #price: price,
            #isNegotiable: isNegotiable,
            #constructionYear: constructionYear,
            #isInBuildUpArea: isInBuildUpArea,
            #landUseCategory: landUseCategory,
          },
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<_i2.DocumentReferenceEntity> insertDepositEntity({
    required double? price,
    required bool? isNegotiable,
    required int? constructionYear,
    required double? height,
    required double? usableSurface,
    required double? administrativeSurface,
    required _i17.DepositType? depositType,
    required int? parkingSpaces,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertDepositEntity,
          [],
          {
            #price: price,
            #isNegotiable: isNegotiable,
            #constructionYear: constructionYear,
            #height: height,
            #usableSurface: usableSurface,
            #administrativeSurface: administrativeSurface,
            #depositType: depositType,
            #parkingSpaces: parkingSpaces,
          },
        ),
        returnValue: _i9.Future<_i2.DocumentReferenceEntity>.value(
            _FakeDocumentReferenceEntity_0(
          this,
          Invocation.method(
            #insertDepositEntity,
            [],
            {
              #price: price,
              #isNegotiable: isNegotiable,
              #constructionYear: constructionYear,
              #height: height,
              #usableSurface: usableSurface,
              #administrativeSurface: administrativeSurface,
              #depositType: depositType,
              #parkingSpaces: parkingSpaces,
            },
          ),
        )),
      ) as _i9.Future<_i2.DocumentReferenceEntity>);

  @override
  _i9.Future<void> updateDepositEntity({
    required _i2.DocumentReferenceEntity? previousProperty,
    required double? price,
    required bool? isNegotiable,
    required int? constructionYear,
    required double? height,
    required double? usableSurface,
    required double? administrativeSurface,
    required _i17.DepositType? depositType,
    required int? parkingSpaces,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateDepositEntity,
          [],
          {
            #previousProperty: previousProperty,
            #price: price,
            #isNegotiable: isNegotiable,
            #constructionYear: constructionYear,
            #height: height,
            #usableSurface: usableSurface,
            #administrativeSurface: administrativeSurface,
            #depositType: depositType,
            #parkingSpaces: parkingSpaces,
          },
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> insertAdEntity({
    required String? title,
    required _i8.AdCategory? category,
    required String? description,
    required _i2.DocumentReferenceEntity? property,
    required _i2.DocumentReferenceEntity? account,
    required _i2.DocumentReferenceEntity? landmark,
    required _i8.ListingType? listingType,
    required List<String>? images,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertAdEntity,
          [],
          {
            #title: title,
            #category: category,
            #description: description,
            #property: property,
            #account: account,
            #landmark: landmark,
            #listingType: listingType,
            #images: images,
          },
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> insertAccountEntity({
    required String? email,
    required String? password,
    required String? phoneNumber,
    required _i7.SellerType? sellerType,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertAccountEntity,
          [],
          {
            #email: email,
            #password: password,
            #phoneNumber: phoneNumber,
            #sellerType: sellerType,
          },
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> updateAdEntity({
    required _i8.AdEntity? previousAd,
    required String? title,
    required _i8.AdCategory? category,
    required String? description,
    required _i8.ListingType? listingType,
    required List<String>? images,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateAdEntity,
          [],
          {
            #previousAd: previousAd,
            #title: title,
            #category: category,
            #description: description,
            #listingType: listingType,
            #images: images,
          },
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<_i2.DocumentReferenceEntity> insertLandmarkEntity(
          {required _i18.LandmarkEntity? landmark}) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertLandmarkEntity,
          [],
          {#landmark: landmark},
        ),
        returnValue: _i9.Future<_i2.DocumentReferenceEntity>.value(
            _FakeDocumentReferenceEntity_0(
          this,
          Invocation.method(
            #insertLandmarkEntity,
            [],
            {#landmark: landmark},
          ),
        )),
      ) as _i9.Future<_i2.DocumentReferenceEntity>);

  @override
  _i9.Future<void> updateLandmarkEntity({
    required _i18.LandmarkEntity? previousLandmark,
    required _i18.LandmarkEntity? landmark,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateLandmarkEntity,
          [],
          {
            #previousLandmark: previousLandmark,
            #landmark: landmark,
          },
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> insertFavoriteAd({
    required _i7.AccountEntity? account,
    required _i8.AdEntity? ad,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertFavoriteAd,
          [],
          {
            #account: account,
            #ad: ad,
          },
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> removeFavoriteAd({
    required _i7.AccountEntity? account,
    required _i8.AdEntity? ad,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeFavoriteAd,
          [],
          {
            #account: account,
            #ad: ad,
          },
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> removeAd({required _i8.AdEntity? ad}) => (super.noSuchMethod(
        Invocation.method(
          #removeAd,
          [],
          {#ad: ad},
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> insertMessage({
    required _i7.AccountEntity? sender,
    required _i7.AccountEntity? receiver,
    required String? message,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertMessage,
          [],
          {
            #sender: sender,
            #receiver: receiver,
            #message: message,
          },
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
}

/// A class which mocks [FilterRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockFilterRepository extends _i1.Mock implements _i19.FilterRepository {
  MockFilterRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Stream<List<_i8.AdEntity>> streamAds() => (super.noSuchMethod(
        Invocation.method(
          #streamAds,
          [],
        ),
        returnValue: _i9.Stream<List<_i8.AdEntity>>.empty(),
      ) as _i9.Stream<List<_i8.AdEntity>>);

  @override
  void setCurrentCategory(_i8.AdCategory? category) => super.noSuchMethod(
        Invocation.method(
          #setCurrentCategory,
          [category],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setCurrentListingType(_i8.ListingType? listingType) =>
      super.noSuchMethod(
        Invocation.method(
          #setCurrentListingType,
          [listingType],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setPriceRange(_i3.Tuple2<double?, double?>? priceRange) =>
      super.noSuchMethod(
        Invocation.method(
          #setPriceRange,
          [priceRange],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setSurfaceRange(_i3.Tuple2<double?, double?>? surfaceRange) =>
      super.noSuchMethod(
        Invocation.method(
          #setSurfaceRange,
          [surfaceRange],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setSearchQuery(String? text) => super.noSuchMethod(
        Invocation.method(
          #setSearchQuery,
          [text],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ImageUploadRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockImageUploadRepository extends _i1.Mock
    implements _i20.ImageUploadRepository {
  MockImageUploadRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i3.Either<_i21.Failure, List<String>>> uploadImages(
          List<String>? paths) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadImages,
          [paths],
        ),
        returnValue: _i9.Future<_i3.Either<_i21.Failure, List<String>>>.value(
            _FakeEither_1<_i21.Failure, List<String>>(
          this,
          Invocation.method(
            #uploadImages,
            [paths],
          ),
        )),
      ) as _i9.Future<_i3.Either<_i21.Failure, List<String>>>);
}

/// A class which mocks [LoginRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginRepository extends _i1.Mock implements _i22.LoginRepository {
  MockLoginRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i3.Either<_i21.Failure, _i7.AccountEntity>> login(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            email,
            password,
          ],
        ),
        returnValue:
            _i9.Future<_i3.Either<_i21.Failure, _i7.AccountEntity>>.value(
                _FakeEither_1<_i21.Failure, _i7.AccountEntity>(
          this,
          Invocation.method(
            #login,
            [
              email,
              password,
            ],
          ),
        )),
      ) as _i9.Future<_i3.Either<_i21.Failure, _i7.AccountEntity>>);
}

/// A class which mocks [PermissionRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPermissionRepository extends _i1.Mock
    implements _i23.PermissionRepository {
  MockPermissionRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isLocationEnabled => (super.noSuchMethod(
        Invocation.getter(#isLocationEnabled),
        returnValue: false,
      ) as bool);

  @override
  _i9.Stream<bool> get locationStatusStream => (super.noSuchMethod(
        Invocation.getter(#locationStatusStream),
        returnValue: _i9.Stream<bool>.empty(),
      ) as _i9.Stream<bool>);

  @override
  _i9.Stream<_i23.AccessStatus> permissionStream(
          _i23.PermissionType? permissionType) =>
      (super.noSuchMethod(
        Invocation.method(
          #permissionStream,
          [permissionType],
        ),
        returnValue: _i9.Stream<_i23.AccessStatus>.empty(),
      ) as _i9.Stream<_i23.AccessStatus>);

  @override
  _i9.Future<bool> askPermission(_i23.PermissionType? permissionType) =>
      (super.noSuchMethod(
        Invocation.method(
          #askPermission,
          [permissionType],
        ),
        returnValue: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  _i23.AccessStatus getAccessStatus(_i23.PermissionType? permissionType) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAccessStatus,
          [permissionType],
        ),
        returnValue: _i23.AccessStatus.granted,
      ) as _i23.AccessStatus);

  @override
  bool isGranted(_i23.PermissionType? permissionType) => (super.noSuchMethod(
        Invocation.method(
          #isGranted,
          [permissionType],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool isPermanentlyDenied(_i23.PermissionType? permissionType) =>
      (super.noSuchMethod(
        Invocation.method(
          #isPermanentlyDenied,
          [permissionType],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool isDenied(_i23.PermissionType? permissionType) => (super.noSuchMethod(
        Invocation.method(
          #isDenied,
          [permissionType],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool isRestricted(_i23.PermissionType? permissionType) => (super.noSuchMethod(
        Invocation.method(
          #isRestricted,
          [permissionType],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i9.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> updatePermissionsStatus() => (super.noSuchMethod(
        Invocation.method(
          #updatePermissionsStatus,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<bool> openLocationService() => (super.noSuchMethod(
        Invocation.method(
          #openLocationService,
          [],
        ),
        returnValue: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);
}

/// A class which mocks [PositionRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPositionRepository extends _i1.Mock
    implements _i24.PositionRepository {
  MockPositionRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Stream<_i25.PositionEntity?> get positionStream => (super.noSuchMethod(
        Invocation.getter(#positionStream),
        returnValue: _i9.Stream<_i25.PositionEntity?>.empty(),
      ) as _i9.Stream<_i25.PositionEntity?>);

  @override
  _i9.Future<void> setLivePosition() => (super.noSuchMethod(
        Invocation.method(
          #setLivePosition,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
}

/// A class which mocks [RegisterService].
///
/// See the documentation for Mockito's code generation for more information.
class MockRegisterService extends _i1.Mock implements _i26.RegisterService {
  MockRegisterService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<String?> login(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            email,
            password,
          ],
        ),
        returnValue: _i9.Future<String?>.value(),
      ) as _i9.Future<String?>);

  @override
  _i9.Future<void> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> saveToken(
    String? token,
    bool? stayConnected,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveToken,
          [
            token,
            stayConnected,
          ],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> initializeCurrentToken() => (super.noSuchMethod(
        Invocation.method(
          #initializeCurrentToken,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
}

/// A class which mocks [AccountEntity].
///
/// See the documentation for Mockito's code generation for more information.
class MockAccountEntity extends _i1.Mock implements _i7.AccountEntity {
  MockAccountEntity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get email => (super.noSuchMethod(
        Invocation.getter(#email),
        returnValue: _i27.dummyValue<String>(
          this,
          Invocation.getter(#email),
        ),
      ) as String);

  @override
  String get password => (super.noSuchMethod(
        Invocation.getter(#password),
        returnValue: _i27.dummyValue<String>(
          this,
          Invocation.getter(#password),
        ),
      ) as String);

  @override
  _i7.SellerType get sellerType => (super.noSuchMethod(
        Invocation.getter(#sellerType),
        returnValue: _i7.SellerType.individual,
      ) as _i7.SellerType);

  @override
  String encryptedPassword() => (super.noSuchMethod(
        Invocation.method(
          #encryptedPassword,
          [],
        ),
        returnValue: _i27.dummyValue<String>(
          this,
          Invocation.method(
            #encryptedPassword,
            [],
          ),
        ),
      ) as String);
}

/// A class which mocks [AdEntity].
///
/// See the documentation for Mockito's code generation for more information.
class MockAdEntity extends _i1.Mock implements _i8.AdEntity {
  MockAdEntity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get title => (super.noSuchMethod(
        Invocation.getter(#title),
        returnValue: _i27.dummyValue<String>(
          this,
          Invocation.getter(#title),
        ),
      ) as String);

  @override
  _i8.AdCategory get adCategory => (super.noSuchMethod(
        Invocation.getter(#adCategory),
        returnValue: _i8.AdCategory.apartament,
      ) as _i8.AdCategory);

  @override
  List<String> get imagesUrls => (super.noSuchMethod(
        Invocation.getter(#imagesUrls),
        returnValue: <String>[],
      ) as List<String>);

  @override
  String get description => (super.noSuchMethod(
        Invocation.getter(#description),
        returnValue: _i27.dummyValue<String>(
          this,
          Invocation.getter(#description),
        ),
      ) as String);

  @override
  set property(_i28.PropertyEntity? _property) => super.noSuchMethod(
        Invocation.setter(
          #property,
          _property,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set account(_i7.AccountEntity? _account) => super.noSuchMethod(
        Invocation.setter(
          #account,
          _account,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set landmark(_i18.LandmarkEntity? _landmark) => super.noSuchMethod(
        Invocation.setter(
          #landmark,
          _landmark,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.ListingType get listingType => (super.noSuchMethod(
        Invocation.getter(#listingType),
        returnValue: _i8.ListingType.sale,
      ) as _i8.ListingType);

  @override
  DateTime get dateOfAd => (super.noSuchMethod(
        Invocation.getter(#dateOfAd),
        returnValue: _FakeDateTime_2(
          this,
          Invocation.getter(#dateOfAd),
        ),
      ) as DateTime);

  @override
  _i2.DocumentReferenceEntity get propertyDocument => (super.noSuchMethod(
        Invocation.getter(#propertyDocument),
        returnValue: _FakeDocumentReferenceEntity_0(
          this,
          Invocation.getter(#propertyDocument),
        ),
      ) as _i2.DocumentReferenceEntity);

  @override
  _i2.DocumentReferenceEntity get landmarkDocument => (super.noSuchMethod(
        Invocation.getter(#landmarkDocument),
        returnValue: _FakeDocumentReferenceEntity_0(
          this,
          Invocation.getter(#landmarkDocument),
        ),
      ) as _i2.DocumentReferenceEntity);

  @override
  _i9.Future<void> setReferences() => (super.noSuchMethod(
        Invocation.method(
          #setReferences,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
}

/// A class which mocks [DocumentReferenceEntity].
///
/// See the documentation for Mockito's code generation for more information.
class MockDocumentReferenceEntity extends _i1.Mock
    implements _i2.DocumentReferenceEntity {
  MockDocumentReferenceEntity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i27.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  _i9.Future<void> set(Map<String, Object?>? json) => (super.noSuchMethod(
        Invocation.method(
          #set,
          [json],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> delete() => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  void listen({
    required void Function()? onModify,
    required void Function()? onDelete,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #listen,
          [],
          {
            #onModify: onModify,
            #onDelete: onDelete,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.CollectionReferenceEntity collection(String? path) => (super.noSuchMethod(
        Invocation.method(
          #collection,
          [path],
        ),
        returnValue: _FakeCollectionReferenceEntity_3(
          this,
          Invocation.method(
            #collection,
            [path],
          ),
        ),
      ) as _i4.CollectionReferenceEntity);
}

/// A class which mocks [LandmarkEntity].
///
/// See the documentation for Mockito's code generation for more information.
class MockLandmarkEntity extends _i1.Mock implements _i18.LandmarkEntity {
  MockLandmarkEntity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void setCoordinates(_i5.CoordinatesEntity? coordinates) => super.noSuchMethod(
        Invocation.method(
          #setCoordinates,
          [coordinates],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setAddress(_i29.AddressEntity? address) => super.noSuchMethod(
        Invocation.method(
          #setAddress,
          [address],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setName(String? name) => super.noSuchMethod(
        Invocation.method(
          #setName,
          [name],
        ),
        returnValueForMissingStub: null,
      );

  @override
  String getName() => (super.noSuchMethod(
        Invocation.method(
          #getName,
          [],
        ),
        returnValue: _i27.dummyValue<String>(
          this,
          Invocation.method(
            #getName,
            [],
          ),
        ),
      ) as String);

  @override
  String getAddressField(_i29.AddressField? field) => (super.noSuchMethod(
        Invocation.method(
          #getAddressField,
          [field],
        ),
        returnValue: _i27.dummyValue<String>(
          this,
          Invocation.method(
            #getAddressField,
            [field],
          ),
        ),
      ) as String);

  @override
  String getAddressString() => (super.noSuchMethod(
        Invocation.method(
          #getAddressString,
          [],
        ),
        returnValue: _i27.dummyValue<String>(
          this,
          Invocation.method(
            #getAddressString,
            [],
          ),
        ),
      ) as String);

  @override
  _i5.CoordinatesEntity getCoordinates() => (super.noSuchMethod(
        Invocation.method(
          #getCoordinates,
          [],
        ),
        returnValue: _FakeCoordinatesEntity_4(
          this,
          Invocation.method(
            #getCoordinates,
            [],
          ),
        ),
      ) as _i5.CoordinatesEntity);
}

/// A class which mocks [MessageEntity].
///
/// See the documentation for Mockito's code generation for more information.
class MockMessageEntity extends _i1.Mock implements _i11.MessageEntity {
  MockMessageEntity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get message => (super.noSuchMethod(
        Invocation.getter(#message),
        returnValue: _i27.dummyValue<String>(
          this,
          Invocation.getter(#message),
        ),
      ) as String);

  @override
  bool get isSenderFirst => (super.noSuchMethod(
        Invocation.getter(#isSenderFirst),
        returnValue: false,
      ) as bool);

  @override
  DateTime get timestamp => (super.noSuchMethod(
        Invocation.getter(#timestamp),
        returnValue: _FakeDateTime_2(
          this,
          Invocation.getter(#timestamp),
        ),
      ) as DateTime);
}

/// A class which mocks [PositionEntity].
///
/// See the documentation for Mockito's code generation for more information.
class MockPositionEntity extends _i1.Mock implements _i25.PositionEntity {
  MockPositionEntity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.CoordinatesEntity getCoordinates() => (super.noSuchMethod(
        Invocation.method(
          #getCoordinates,
          [],
        ),
        returnValue: _FakeCoordinatesEntity_4(
          this,
          Invocation.method(
            #getCoordinates,
            [],
          ),
        ),
      ) as _i5.CoordinatesEntity);
}
